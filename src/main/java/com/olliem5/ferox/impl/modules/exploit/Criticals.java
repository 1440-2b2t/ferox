package com.olliem5.ferox.impl.modules.exploit;

import com.olliem5.ferox.api.module.Category;
import com.olliem5.ferox.api.module.FeroxModule;
import com.olliem5.ferox.api.module.Module;
import com.olliem5.ferox.api.setting.Setting;
import com.olliem5.ferox.impl.events.PacketEvent;
import com.olliem5.pace.annotation.PaceHandler;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketUseEntity;

import java.util.Objects;

/**
 * @author olliem5
 * @author linustouchtips
 */

@FeroxModule(name = "Criticals", description = "Makes every attack a critical hit", category = Category.Exploit)
public final class Criticals extends Module {
    public static final Setting<CriticalModes> mode = new Setting<>("Mode", "The way of achieving critical hits", CriticalModes.Bypass);
    public static final Setting<Boolean> workOnCrystals = new Setting<>("Work on Crystals", "Allow critical attacks to happen when you hit a crystal", false);
    public static final Setting<Boolean> cancelInAir = new Setting<>("Cancel in Air", "Allow critical attacks to happen when you are in the air", false);
    public static final Setting<Boolean> cancelInLiquid = new Setting<>("Cancel in Liquid", "Allow critical attacks to happen when you are in liquid", false);

    public Criticals() {
        this.addSettings(
                mode,
                workOnCrystals,
                cancelInAir,
                cancelInLiquid
        );
    }

    @PaceHandler
    public void onPacketSend(PacketEvent.Send event) {
        if (nullCheck()) return;

        if (event.getPacket() instanceof CPacketUseEntity) {
            CPacketUseEntity cPacketUseEntity = (CPacketUseEntity) event.getPacket();

            if (cPacketUseEntity.getAction() == CPacketUseEntity.Action.ATTACK && mc.player.onGround) {
                if (cPacketUseEntity.getEntityFromWorld(mc.world) instanceof EntityEnderCrystal && !workOnCrystals.getValue()) return;

                if (!mc.player.onGround && cancelInAir.getValue()) return;

                if (mc.player.inWater || mc.player.isInLava() && cancelInLiquid.getValue()) return;

                switch (mode.getValue()) {
                    case Packet:
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.1f, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
                        break;
                    case Bypass:
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.1625, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 4.0E-6, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.0E-6, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, false));
                        mc.player.connection.sendPacket(new CPacketPlayer());
                        mc.player.onCriticalHit(Objects.requireNonNull(cPacketUseEntity.getEntityFromWorld(mc.world)));
                        break;
                    case Jump:
                        mc.player.jump();
                        break;
                    case MiniJump:
                        mc.player.jump();
                        mc.player.motionY = 0.25;
                        break;
                }
            }
        }
    }

    public String getArraylistInfo() {
        return mode.getValue().toString();
    }

    public enum CriticalModes {
        Packet,
        Bypass,
        Jump,
        MiniJump
    }
}
