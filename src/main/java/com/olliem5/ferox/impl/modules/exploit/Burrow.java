package com.olliem5.ferox.impl.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.olliem5.ferox.api.module.Category;
import com.olliem5.ferox.api.module.FeroxModule;
import com.olliem5.ferox.api.module.Module;
import com.olliem5.ferox.api.setting.NumberSetting;
import com.olliem5.ferox.api.setting.Setting;
import com.olliem5.ferox.api.util.client.MessageUtil;
import com.olliem5.ferox.api.util.player.InventoryUtil;
import com.olliem5.ferox.api.util.player.PlayerUtil;
import com.olliem5.ferox.api.util.render.draw.RenderUtil;
import com.olliem5.ferox.api.util.world.PlaceUtil;
import me.olliem5.pace.annotation.PaceHandler;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import org.lwjgl.opengl.GL11;

import java.awt.*;

/**
 * @author olliem5
 */

@FeroxModule(name = "Burrow", description = "Places a block inside of you", category = Category.Exploit)
public final class Burrow extends Module {
    public static final Setting<Boolean> centerPlayer = new Setting<>("Center Player", "Centers the player before burrowing", true);
    public static final Setting<Boolean> disableAferPlace = new Setting<>("Disable after Place", "Disables the module after a place", true);

    public static final Setting<Boolean> renderPlace = new Setting<>("Render", "Allows the placements to be rendered", true);
    public static final Setting<RenderModes> renderMode = new Setting<>(renderPlace, "Render Mode", "The type of box to render", RenderModes.Full);
    public static final NumberSetting<Double> outlineWidth = new NumberSetting<>(renderPlace, "Outline Width", "The width of the outline", 1.0, 2.0, 5.0, 1);
    public static final Setting<Color> renderColour = new Setting<>(renderPlace, "Render Colour", "The colour for the placements", new Color(57, 221, 162, 237));

    public Burrow() {
        this.addSettings(
                centerPlayer,
                disableAferPlace,
                renderPlace
        );
    }

    private int obsidianSlot;

    private Vec3d center = Vec3d.ZERO;
    private BlockPos playerPos = null;

    @Override
    public void onEnable() {
        if (nullCheck()) return;

        obsidianSlot = InventoryUtil.getHotbarBlockSlot(Blocks.OBSIDIAN);

        if (obsidianSlot == -1) {
            MessageUtil.sendClientMessage("No Obsidian, " + ChatFormatting.RED + "Disabling!");
            this.toggle();
        } else {
            playerPos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ);

            if (mc.world.getBlockState(playerPos).getBlock() == Blocks.AIR) {
                if (centerPlayer.getValue()) {
                    mc.player.motionX = 0;
                    mc.player.motionZ = 0;

                    center = PlayerUtil.getCenter(mc.player.posX, mc.player.posY, mc.player.posZ);

                    mc.player.connection.sendPacket(new CPacketPlayer.Position(center.x, center.y, center.z, true));
                    mc.player.setPosition(center.x, center.y, center.z);
                }

                if (mc.player.onGround) {
                    mc.player.jump();
                }
            }
        }
    }

    @Override
    public void onDisable() {
        if (nullCheck()) return;

        center = Vec3d.ZERO;
        playerPos = null;
    }

    public void onUpdate() {
        if (nullCheck()) return;

        if (mc.player.posY > playerPos.getY() + 1.2) {
            final int oldInventorySlot = mc.player.inventory.currentItem;

            if (obsidianSlot != -1) {
                mc.player.inventory.currentItem = obsidianSlot;
            }

            if (mc.player.getHeldItemMainhand().getItem() == Item.getItemFromBlock(Blocks.OBSIDIAN)) {
                PlaceUtil.placeBlock(playerPos);
            }

            mc.player.inventory.currentItem = oldInventorySlot;

            mc.player.jump();

            if (disableAferPlace.getValue()) {
                this.toggle();
            }
        }
    }

    @PaceHandler
    public void onRenderWorldLast(RenderWorldLastEvent event) {
        if (nullCheck()) return;

        GL11.glLineWidth(outlineWidth.getValue().floatValue());

        if (renderPlace.getValue()) {
            if (playerPos != null) {
                switch (renderMode.getValue()) {
                    case Box:
                        RenderUtil.draw(playerPos, true, false, 0, 0, renderColour.getValue());
                        break;
                    case Outline:
                        RenderUtil.draw(playerPos, false, true, 0, 0, renderColour.getValue());
                        break;
                    case Full:
                        RenderUtil.draw(playerPos, true, true, 0, 0, renderColour.getValue());
                        break;
                }
            }
        }
    }

    public enum RenderModes {
        Box,
        Outline,
        Full
    }
}
